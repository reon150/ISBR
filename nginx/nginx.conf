upstream products_service {
    server products-service:3001;
}

upstream inventory_service {
    server inventory-service:3002;
}

server {
    listen 80;
    server_name localhost;

    # Increase buffer sizes for larger requests
    client_max_body_size 10M;
    client_body_buffer_size 128k;

    # Timeout configurations
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Products Service routes
    location /api/auth {
        proxy_pass http://products_service;
        proxy_http_version 1.1;

        # Forward headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;

        # WebSocket support (if needed in future)
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;

        # CORS headers (if needed)
        add_header X-Gateway "products-service";
    }

    location /api/products {
        proxy_pass http://products_service;
        proxy_http_version 1.1;

        # Forward headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;

        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;

        # CORS headers
        add_header X-Gateway "products-service";
    }

    location /api/categories {
        proxy_pass http://products_service;
        proxy_http_version 1.1;

        # Forward headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;

        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;

        # CORS headers
        add_header X-Gateway "products-service";
    }

    # Inventory Service routes
    location /api/inventory {
        proxy_pass http://inventory_service;
        proxy_http_version 1.1;

        # Forward headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        proxy_set_header Authorization $http_authorization;

        # WebSocket support
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;

        # CORS headers
        add_header X-Gateway "inventory-service";
    }

    # Products Service Swagger UI and assets
    location ~ ^/api/products/docs(/.*)?$ {
        rewrite ^/api/products/docs(/.*)?$ /docs$1 break;
        proxy_pass http://products_service;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/products/docs-json {
        proxy_pass http://products_service/docs-json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Content-Type application/json;
    }

    # Inventory Service Swagger UI and assets
    location ~ ^/api/inventory/docs(/.*)?$ {
        rewrite ^/api/inventory/docs(/.*)?$ /docs$1 break;
        proxy_pass http://inventory_service;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/inventory/docs-json {
        proxy_pass http://inventory_service/docs-json;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header Content-Type application/json;
    }


    # Default fallback
    location / {
        return 404 '{"error": "Not Found", "message": "The requested endpoint does not exist. Please check the API documentation."}';
        add_header Content-Type application/json;
    }

    # Error pages
    error_page 502 503 504 /50x.html;
    location = /50x.html {
        return 502 '{"error": "Bad Gateway", "message": "The service is temporarily unavailable. Please try again later."}';
        add_header Content-Type application/json;
    }
}
